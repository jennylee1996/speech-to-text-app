// Mock implementation of the speech-to-text API for development without a backend

// Helper function to simulate API delay
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export const mockSpeechToTextService = {
  // Mock transcribe video
  transcribeVideo: async (videoFile: File, languageCode: string = 'en') => {
    console.log('Mock API: Transcribing video', videoFile.name, 'with language', languageCode);
    await delay(1500); // Simulate network delay
    
    return {
      transcriptionId: 'mock-transcription-' + Date.now(),
      status: 'completed',
      transcript: `This is a sample transcript generated from the video file "${videoFile.name}" in language "${languageCode}".`
    };
  },

  // Mock transcribe URL
  transcribeUrl: async (url: string) => {
    console.log('Mock API: Transcribing URL', url);
    await delay(1500); // Simulate network delay
    
    return {
      transcriptionId: 'mock-transcription-' + Date.now(),
      message: 'Transcription started successfully'
    };
  },

  // Mock transcribe link
  transcribeLink: async (url: string, languageCode: string = 'en') => {
    console.log('Mock API: Transcribing Link', url, 'with language', languageCode);
    await delay(1500); // Simulate network delay
    
    // Return direct transcript response instead of transcription ID
    return {
      status: 'completed',
      transcript: `This is a sample transcript from the link endpoint. The content was transcribed from: ${url} in language "${languageCode}".`,
      mediaUrl: url
    };
  },

  // Mock start live transcription
  startLiveTranscription: async () => {
    console.log('Mock API: Starting live transcription');
    await delay(1000); // Simulate network delay
    
    return {
      sessionId: 'mock-session-' + Date.now(),
      message: 'Live transcription started successfully'
    };
  },

  // Mock stop live transcription
  stopLiveTranscription: async () => {
    console.log('Mock API: Stopping live transcription');
    await delay(500); // Simulate network delay
    
    return {
      message: 'Live transcription stopped successfully'
    };
  },

  // Mock get transcription status
  getTranscriptionStatus: async (transcriptionId: string) => {
    console.log('Mock API: Getting status for', transcriptionId);
    await delay(1000); // Simulate network delay
    
    // After the first call, randomly decide if transcription is complete
    const status = Math.random() > 0.3 ? 'completed' : 'processing';
    
    return {
      transcriptionId,
      status,
      progress: status === 'completed' ? 100 : Math.floor(Math.random() * 90) + 10
    };
  },

  // Mock get transcription result
  getTranscriptionResult: async (transcriptionId: string) => {
    console.log('Mock API: Getting result for', transcriptionId);
    await delay(500); // Simulate network delay
    
    return {
      transcriptionId,
      transcript: "This is a sample transcript generated by the mock API. In a real application, this would be the actual transcribed text from the audio or video source. The transcript would include all spoken words with timestamps and possibly speaker identification if available."
    };
  }
};

export default mockSpeechToTextService; 